from __future__ import annotations as _annotations

from typing import Optional, List, Any, Dict
from dataclasses import dataclass
from pydantic import BaseModel, Field

from pydantic_ai import Agent, RunContext

from .agent_prompts import ACTION_ANALYZER_SYSTEM_PROMPT
from ..action_executor.agent import ActionExecutorOutput
from ..action_planner.agent import TroubleshootingStep
from ..fault_summary.agent import FaultSummary

# Output schema to structure the agent's analysis.
@dataclass
class ActionAnalysisReport(BaseModel):
    """Structured analysis report for network device command output."""

    key_findings: List[str] = Field(..., description="Concise summary statements of main observations and relevant data points.")
    issues_identified: List[str] = Field(..., description="Descriptions of any issues, abnormalities, or deviations found.")
    recommendations: List[str] = Field(..., description="Actionable steps and next recommendations to address identified issues.")
    confidence_level: str = Field(..., description="Overall confidence rating (High, Medium, or Low) with brief justification.")

@dataclass
class ActionAnalyzerDependencies:
    """
    Dependencies for the action_analyzer agent.
    
    Attributes:
        executor_output: The output returned by action_executor
        action_plan: The list of troubleshooting steps from action_planner
        fault_summary: The FaultSummary object generated by the fault_summary agent
        current_step: The current troubleshooting step being analyzed
        settings: Dictionary containing settings like 'debug_mode' and 'simulation_mode'
        logger: Optional logger instance to use for logging
    """
    executor_output: ActionExecutorOutput
    action_plan: List[TroubleshootingStep]
    fault_summary: FaultSummary
    current_step: TroubleshootingStep
    settings: Dict[str, bool] = None
    logger: Optional[Any] = None
    
# The core agent definition
action_analyzer = Agent(
    model='openai:gpt-4o',  # or use your preferred model
    output_type=ActionAnalysisReport,
    system_prompt=ACTION_ANALYZER_SYSTEM_PROMPT,
    name='action_analyzer',
    retries=1,
    deps_type=ActionAnalyzerDependencies,
    instrument=True,
)

async def run(deps: ActionAnalyzerDependencies) -> RunContext:
    """
    Run the action_analyzer agent to analyze the output of a network device command.
    
    Args:
        deps: The dependencies containing executor output, action plan, fault summary, current step, settings and logger
        
    Returns:
        An ActionAnalysisReport containing structured analysis of the command output
    """
    # Initialize settings if None in dependencies
    if deps.settings is None:
        deps.settings = {"debug_mode": False, "simulation_mode": True}
    
    # Log debug information if debug mode is enabled
    if deps.settings.get("debug_mode", False) and deps.logger:
        deps.logger.info("Action Analyzer Agent System Prompt", extra={
            "system_prompt": ACTION_ANALYZER_SYSTEM_PROMPT
        })
    
    # Extract command output from executor_output
    command_outputs = deps.executor_output.command_outputs
    command_output_text = ""
    for cmd_output in command_outputs:
        command_output_text += f"Command: {cmd_output['cmd']}\nOutput:\n{cmd_output['output']}\n\n"
    
    # Format context from fault summary
    fault_summary_context = (
        f"Fault Summary:\n"
        f"- Title: {deps.fault_summary.title}\n"
        f"- Summary: {deps.fault_summary.summary}\n"
        f"- Hostname: {deps.fault_summary.hostname}\n"
        f"- Severity: {deps.fault_summary.severity}\n"
        f"- Timestamp: {deps.fault_summary.timestamp}\n"
    )
    
    # Add context from the current step being analyzed
    commands_str = "\n    ".join(deps.current_step.commands) if deps.current_step.commands else "None"
    current_step_context = (
        f"Current Step:\n"
        f"- Description: {deps.current_step.description}\n"
        f"- Commands:\n    {commands_str}\n"
        f"- Output Expectation: {deps.current_step.output_expectation}\n"
    )
    
    # Construct the user input with all relevant context
    user_input = (
        f"Analyze the following network device command output:\n\n"
        f"{command_output_text}\n\n"
        f"{fault_summary_context}\n\n"
        f"{current_step_context}"
    )
    
    if deps.settings.get("debug_mode", False) and deps.logger:
        deps.logger.info("Action Analyzer input", extra={
            "user_input": user_input,
            "command_outputs": command_outputs
        })

    # Run the agent with the formatted input
    return await action_analyzer.run(user_input, deps=deps)
