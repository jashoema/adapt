from __future__ import annotations
from dataclasses import dataclass
from typing import Any, List, Dict, Optional, TypedDict, Literal
from pydantic import BaseModel, Field
from datetime import datetime

# Dependencies classes for agents
class FaultSummaryDependencies(BaseModel):
    """Dependencies for the Fault Summary agent."""
    settings: Dict[str, Any] = {"debug_mode": False, "simulation_mode": True, "test_mode": False}
    logger: Optional[Any] = None
    
class ActionPlannerDependencies(BaseModel):
    """
    Dependencies for the action planner agent.
    
    Attributes:
        fault_summary: The FaultSummary object generated by the fault_summary agent
        device_facts: Dictionary containing device facts like hostname, OS version, and model
        settings: Dictionary containing settings like 'debug_mode' and 'simulation_mode'
        custom_instructions: Optional dictionary containing custom troubleshooting steps for this specific fault
        logger: Optional logger instance to use for logging
    """
    fault_summary: FaultSummary
    device_facts: Dict[str, Any]
    settings: Dict[str, Any]
    custom_instructions: Optional[str] = None 
    logger: Optional[Any] = None
    
class ActionAnalyzerDependencies(BaseModel):
    """
    Dependencies for the action_analyzer agent.
    
    Attributes:
        action_plan_history: List of previous troubleshooting steps
        action_plan_remaining: List of remaining troubleshooting steps
        current_step_index: Index of the current step in the action plan
        current_step: The current troubleshooting step being executed
        execution_result: The result of the action executor agent
        fault_summary: Summary of the fault being analyzed
        device_facts: Facts about the network device
        settings: Settings for the agent's operation
        logger: Optional logger for debugging and information        
    """
    action_plan_history: List[TroubleshootingStep]
    action_plan_remaining: List[TroubleshootingStep]
    current_step_index: int
    current_step: TroubleshootingStep
    execution_result: ActionExecutorOutput
    fault_summary: FaultSummary
    device_facts: Dict[str, Any]
    settings: Dict[str, Any]
    logger: Optional[Any] = None

class ResultSummaryDependencies(BaseModel):
    """
    Dependencies for the result_summary agent.
    
    Attributes:
        fault_summary: The FaultSummary object generated by the fault_summary agent
        action_plan_history: List of previously executed troubleshooting steps
        action_plan_remaining: List of remaining steps that were not executed
        current_step: The final step that was executed
        current_step_index: Index of the current/last executed step
        alert_raw_data: The original raw alert that triggered the workflow
        device_facts: Dictionary containing device facts and reachability information
        settings: Settings for the agent's operation
        logger: Optional logger for debugging and information
    """
    fault_summary: Optional[FaultSummary] = None
    action_plan_history: List[TroubleshootingStep] = []
    action_plan_remaining: List[TroubleshootingStep] = []
    current_step: Optional[TroubleshootingStep] = None
    current_step_index: int = 0
    alert_raw_data: str = ""
    device_facts: Dict[str, Any] = {}
    settings: Dict[str, Any] = {"debug_mode": False, "simulation_mode": True, "test_mode": False}
    logger: Optional[Any] = None

class HelloWorldDependencies(BaseModel):
    """Dependencies for the Hello World agent."""
    settings: Dict[str, Any] = {"debug_mode": False, "simulation_mode": True}
    logger: Optional[Any] = None

@dataclass
class ActionExecutorDeps:
    """Dependencies for the action executor agent."""
    current_step: TroubleshootingStep
    device_driver: Any  # The actual Netmiko device driver object
    device_facts: Dict[str, Any]
    settings: Dict[str, Any]
    logger: Optional[Any] = None

# CommandOutput
class CommandOutput(TypedDict):
    cmd: str
    output: str

# ActionExecutorOutput
@dataclass
class ActionExecutorOutput:
    """Output from the action executor agent"""
    description: str  # Description of the action taken
    command_outputs: list[CommandOutput]  # List of command:output pairs
    errors: Optional[List[str]] = None

# ActionAnalysisReport
class ActionAnalysisReport(BaseModel):
    """Structured analysis report for network device command output."""
    analysis: str = Field(..., description="A technical summary (≤120 words)")
    findings: List[str] = Field(..., description="List of line excerpts from the output")
    next_action_type: str = Field(
        ..., 
        description="Next action recommendation", 
        pattern="^(continue|new_action|escalate|resolve)$"
    )
    next_action_reason: str = Field(..., description="1-sentence justification for the next action type")
    updated_action_plan_remaining: Optional[List['TroubleshootingStep']] = Field(
        None, 
        description="Optional list of action steps, included when next_action_type is 'new_action' or when populating variables in a 'continue' action"
    )

# TroubleshootingStep
class TroubleshootingStep(BaseModel):
    """
    Represents a single diagnostic step in a network troubleshooting plan.
    Attributes:
        description: A clear explanation of this diagnostic step.
        action_type: The type of action being performed: diagnostic, config, exec, or escalation.
        commands: List of CLI commands to execute (may be empty for escalation type).
        output_expectation: What should be expected in the output and how to interpret it.
        requires_approval: Whether this step may impact configurations or service.
    """
    description: str = Field(..., description="What this step checks or accomplishes")
    action_type: Literal["diagnostic", "config", "exec", "escalation"] = Field(
        ..., description="Type of action: diagnostic, config, exec, or escalation"
    )
    commands: List[str] = Field(
        ..., description="List of CLI commands to execute (may be empty for escalation)"
    )
    output_expectation: str = Field(..., description="What success looks like and how the output is used")
    requires_approval: bool = Field(..., description="True if this step could alter configuration or impact services")
    analysis_report: Optional[ActionAnalysisReport] = Field(None, description="Analysis report of the troubleshooting step; only populated after step has been executed")

# FaultSummary
class FaultSummary(BaseModel):
    """Structured summary of a diagnosed network fault alert."""
    title: str = Field(default="Default Title", description="concise alert title, ≤ 8 words")
    summary: str = Field(default="Unspecified network issue detected", description="≤ 40-word factual synopsis")
    hostname: str = Field(default="unknown-device", description="device hostname")
    timestamp: datetime = Field(default_factory=datetime.now, description="ISO-8601 timestamp")
    severity: Literal["Critical", "High", "Medium", "Low"] = Field(default="Medium", description="Alert severity level")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional diagnostic values like interface names, VRF, module IDs, neighbor IPs")

class ResultSummary(BaseModel):
    """Structured summary of a network troubleshooting session."""
    summary_title: str = Field(default="Troubleshooting Summary", description="concise title of the troubleshooting session")
    fault_recap: str = Field(default="Unspecified network issue", description="brief recap of the original fault")
    resolution_status: Literal["Resolved", "Partially Resolved", "Unresolved", "Escalated"] = Field(default="Unresolved", description="Resolution status")
    key_findings: List[str] = Field(default_factory=list, description="list of important discoveries")
    successful_actions: List[str] = Field(default_factory=list, description="list of actions that were successful")
    failed_actions: List[str] = Field(default_factory=list, description="list of actions that failed")
    root_cause: str = Field(default="", description="identified root cause if resolved")
    recommended_next_steps: List[str] = Field(default_factory=list, description="list of recommended next steps")
    escalation_details: str = Field(default="", description="details if escalation is needed")
    time_metrics: Dict[str, Any] = Field(default_factory=dict, description="metrics about the troubleshooting time")

# Resolve circular references by rebuilding the models
TroubleshootingStep.model_rebuild()
ActionAnalysisReport.model_rebuild()
