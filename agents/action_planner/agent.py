import os
from typing import List, Optional, Any, Dict
from dataclasses import dataclass

import logfire
from pydantic import BaseModel, Field
from pydantic_ai import Agent, RunContext

from .agent_prompts import SYSTEM_PROMPT
from ..fault_summary.agent import FaultSummary

# Logfire instrumentation is enabled if API key is set
logfire_api_key = os.getenv('LOGFIRE_KEY')
logfire.configure(send_to_logfire='if-token-present')

@dataclass
class ActionPlannerDependencies:
    """
    Dependencies for the action planner agent.
    
    Attributes:
        fault_summary: The FaultSummary object generated by the fault_summary agent
        settings: Dictionary containing settings like 'debug_mode' and 'simulation_mode'
        logger: Optional logger instance to use for logging
    """
    fault_summary: FaultSummary
    settings: Dict[str, bool] = None
    logger: Optional[Any] = None
    
class TroubleshootingStep(BaseModel):
    """
    Represents a single diagnostic step in a network troubleshooting plan.

    Attributes:
        description: A clear explanation of this diagnostic step.
        command: The exact command to execute (use vendor-appropriate syntax).
        output_expectation: What should be expected in the output and how to interpret it.
        requires_approval: Whether this step may impact configurations or service.
    """
    description: str = Field(..., description="What this diagnostic step checks")
    command: str = Field(..., description="The precise CLI command to execute")
    output_expectation: str = Field(..., description="What to look for in the output and diagnostic implications")
    requires_approval: bool = Field(..., description="True if this step could alter configuration or impact services")

# Create the agent with type-safe output and instructions
action_planner = Agent(
    model="openai:gpt-4o",
    system_prompt=SYSTEM_PROMPT,
    output_type=List[TroubleshootingStep],
    deps_type=ActionPlannerDependencies,
    instrument=True,
)

async def run(user_input: str, deps: ActionPlannerDependencies) -> RunContext:
    """
    Run the action planner agent with the given user input.
    
    Args:
        user_input: A description of the network fault
        deps: Dependencies including fault_summary, settings, logger, and latest_user_message
        
    Returns:
        The agent's response object containing the list of TroubleshootingStep items
    """
    # Initialize settings if None in dependencies
    if deps.settings is None:
        deps.settings = {"debug_mode": False, "simulation_mode": True}
    
   
    # Log debug information if debug mode is enabled
    if deps.settings.get("debug_mode", False) and deps.logger:
        deps.logger.info("Action Planner Agent System Prompt", extra={
            "system_prompt": SYSTEM_PROMPT,
            "user_input": user_input
        })

    # If fault_summary is provided in ActionPLannerDependencies, add it to the context of the user_input
    # Don't simply dump the object, but rather extract the relevant fields
    if deps.fault_summary:
        fault_summary = deps.fault_summary
        fault_summary_context = (
            f"Fault Summary:\n"
            f"- Title: {fault_summary.title}\n"
            f"- Summary: {fault_summary.summary}\n"
            f"- Hostname: {fault_summary.hostname}\n"
            f"- OS: {fault_summary.operating_system}\n"
            f"- Severity: {fault_summary.severity}\n"
            f"- Timestamp: {fault_summary.timestamp}\n"
        )
        user_input = (
            f"{user_input}\n\n"
            f"{fault_summary_context}"
        )

    return await action_planner.run(user_input, deps=deps)


